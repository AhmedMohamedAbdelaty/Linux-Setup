#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""

    # Execute initial checks.
    _check_dependencies "
        command=pdfinfo; pkg_manager=apt; package=poppler-utils |
        command=pdfinfo; pkg_manager=dnf; package=poppler-utils |
        command=pdfinfo; pkg_manager=pacman; package=poppler |
        command=pdfinfo; pkg_manager=zypper; package=poppler-tools"
    _display_wait_box "2"
    input_files=$(_get_files "par_type=file; par_recursive=true; par_get_pwd=true; par_select_mime=application/pdf")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" ""

    local std_output=""
    std_output=$(_storage_text_read_all)
    std_output=$(_text_sort "$std_output")

    _display_list_box "$std_output" "--column=Protection;--column=File"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""

    # Run the main process.
    std_output=$(pdfinfo -- "$input_file" 2>&1)

    # Save the result only for 'encrypted' PDFs.
    if [[ "$std_output" == *"yes ("* ]]; then
        std_output=$(grep --only-matching "(print.*)" <<<"$std_output")
        # shellcheck disable=SC2001
        std_output=$(sed "s|^(\(.*\))$|\1|g" <<<"$std_output")
        _storage_text_write_ln "$std_output$FIELD_SEPARATOR$(_text_remove_pwd "$input_file")"
    elif [[ "$std_output" == *"Incorrect password"* ]]; then
        _storage_text_write_ln "password protection$FIELD_SEPARATOR$(_text_remove_pwd "$input_file")"
    fi
}

_main "$@"
